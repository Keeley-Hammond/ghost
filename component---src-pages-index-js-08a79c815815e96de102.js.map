{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Adsense/index.js","webpack:///./src/templates/Post/index.js"],"names":["__webpack_exports__","default","_ref","data","location","posts","lodash_get__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","components_Layout__WEBPACK_IMPORTED_MODULE_5__","components_Meta__WEBPACK_IMPORTED_MODULE_4__","site","map","_ref2","i","post","templates_Post__WEBPACK_IMPORTED_MODULE_3__","options","isIndex","key","pageQuery","175","e","t","178","n","r","o","c","l","s","m","d","u","p","components_Adsense","componentDidMount","this","props","clientId","window","adsbygoogle","push","render","_this$props","slotId","format","react_default","className","style","display","data-ad-client","data-ad-slot","data-ad-format","Component","Post_getAd","_data$frontmatter","frontmatter","category","tags","description","title","path","date","image","adsense","html","get_default","isMore","match","fixed","gatsby_browser_entry","Link","boxShadow","to","dateTime","Post_Badges","items","primary","gatsby_image_default","margin","dangerouslySetInnerHTML","__html","getDescription","Post_Button","label","body","replace","split","_ref3","map_default","item"],"mappings":"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","file":"component---src-pages-index-js-08a79c815815e96de102.js","sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\nimport get from 'lodash/get'\n\nimport Post from 'templates/Post'\nimport Meta from 'components/Meta'\nimport Layout from 'components/Layout'\n\nconst BlogIndex = ({ data, location }) => {\n  const posts = get(data, 'remark.posts')\n  return (\n    <Layout location={location}>\n      <Meta site={get(data, 'site.meta')} />\n      {posts.map(({ post }, i) => (\n        <Post\n          data={post}\n          options={{\n            isIndex: true,\n          }}\n          key={i}\n        />\n      ))}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        url: siteUrl\n        author\n        twitter\n        adsense\n      }\n    }\n    remark: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      posts: edges {\n        post: node {\n          html\n          frontmatter {\n            layout\n            title\n            path\n            category\n            tags\n            description\n            date(formatString: \"YYYY/MM/DD\")\n            image {\n              childImageSharp {\n                fixed(width: 500) {\n                  ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nclass Adsense extends React.Component {\n  componentDidMount() {\n    const { clientId } = this.props\n    if (clientId) {\n      ;(window.adsbygoogle = window.adsbygoogle || []).push({})\n    }\n  }\n\n  render() {\n    const { clientId, slotId, format } = this.props\n\n    return clientId ? (\n      <div className=\"ad\">\n        <ins\n          className=\"adsbygoogle\"\n          style={{ display: 'block' }}\n          data-ad-client={clientId}\n          data-ad-slot={slotId}\n          data-ad-format={format}\n        />\n      </div>\n    ) : (\n      ''\n    )\n  }\n}\nexport default Adsense\n","import { Link } from 'gatsby'\nimport get from 'lodash/get'\nimport React from 'react'\nimport map from 'lodash/map'\nimport Img from 'gatsby-image'\n\nimport Adsense from 'components/Adsense'\nimport Footer from 'components/Footer'\nimport './style.scss'\n\nconst Post = ({ data, options }) => {\n  const {\n    category,\n    tags,\n    description,\n    title,\n    path,\n    date,\n    image,\n  } = data.frontmatter\n  const { isIndex, adsense } = options\n  const html = get(data, 'html')\n  const isMore = isIndex && !!html.match('<!--more-->')\n  const fixed = get(image, 'childImageSharp.fixed')\n\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{title}</h1>\n            <time dateTime={date}>{date}</time>\n          </Link>\n          {Badges({ items: [category], primary: true })}\n          {Badges({ items: tags })}\n        </div>\n        <div className=\"content\">\n          <p>{description}</p>\n          {fixed ? (\n            <Img fixed={fixed} style={{ display: 'block', margin: '0 auto' }} />\n          ) : (\n            ''\n          )}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: isMore ? getDescription(html) : html,\n          }}\n        />\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\n        {getAd(isIndex, adsense)}\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n\nconst getAd = (isIndex, adsense) => {\n  return !isIndex ? <Adsense clientId={adsense} slotId=\"\" format=\"auto\" /> : ''\n}\n\nconst getDescription = body => {\n  body = body.replace(/<blockquote>/g, '<blockquote class=\"blockquote\">')\n  if (body.match('<!--more-->')) {\n    body = body.split('<!--more-->')\n    if (typeof body[0] !== 'undefined') {\n      return body[0]\n    }\n  }\n  return body\n}\n\nconst Button = ({ path, label, primary }) => (\n  <Link className=\"readmore\" to={path}>\n    <span\n      className={`btn btn-outline-primary btn-block ${\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\n      }`}\n    >\n      {label}\n    </span>\n  </Link>\n)\n\nconst Badges = ({ items, primary }) =>\n  map(items, (item, i) => {\n    return (\n      <span\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\n        key={i}\n      >\n        {item}\n      </span>\n    )\n  })\n"],"sourceRoot":""}